/* The following code was generated by JFlex 1.4.3 on 10/8/13 6:13 PM */

package org.dylanfoundry.deft.filetypes.dylan;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.dylanfoundry.deft.filetypes.dylan.psi.DylanTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/8/13 6:13 PM from the specification file
 * <tt>/Users/cek/Dev/dylan-lang/DeftIDEA/src/org/dylanfoundry/deft/filetypes/dylan/Dylan.flex</tt>
 */
class DylanLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int WAITING_VALUE = 2;
  public static final int STRING = 8;
  public static final int YYINITIAL = 0;
  public static final int DYLAN_CODE = 4;
  public static final int COMMENT_BLOCK = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\36\1\35\1\0\1\40\1\34\22\0\1\37\1\3\1\41"+
    "\1\23\2\3\1\13\1\20\1\65\1\66\1\11\1\10\1\73\1\7"+
    "\1\33\1\12\1\21\1\26\6\26\2\1\1\16\1\74\1\14\1\5"+
    "\1\15\1\4\1\3\1\24\1\24\2\24\1\31\1\24\10\2\1\27"+
    "\13\2\1\67\1\17\1\70\1\13\1\75\1\0\1\30\1\25\1\54"+
    "\1\57\1\32\1\44\1\52\1\62\1\53\1\2\1\47\1\51\1\61"+
    "\1\45\1\55\1\56\1\2\1\22\1\46\1\43\1\63\1\64\1\60"+
    "\1\42\1\50\1\2\1\71\1\13\1\72\1\6\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\1\1\3\2\4\1\5\1\6"+
    "\2\7\2\10\1\11\1\12\1\1\1\13\1\14\1\15"+
    "\1\16\4\17\3\1\1\20\3\12\1\21\2\22\1\23"+
    "\15\12\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\3\35\3\36\1\37\1\40\1\35\3\41"+
    "\4\0\1\11\1\42\1\0\1\43\1\44\1\45\1\17"+
    "\1\11\2\0\1\46\1\0\1\47\1\0\1\17\1\50"+
    "\1\0\1\51\1\0\4\52\3\0\1\11\1\0\1\53"+
    "\1\0\1\11\1\54\2\0\1\55\1\56\5\12\1\11"+
    "\2\0\11\12\1\57\17\12\1\60\1\61\1\62\1\11"+
    "\2\0\1\47\1\0\2\47\1\0\1\17\5\0\1\52"+
    "\2\63\1\0\1\11\3\0\2\12\1\64\1\12\1\65"+
    "\1\66\4\12\1\67\23\12\1\70\1\12\1\11\1\0"+
    "\1\47\3\0\1\71\4\12\1\72\22\12\1\73\1\0"+
    "\1\74\5\12\1\75\2\12\1\76\5\12\1\77\5\12"+
    "\1\0\1\100\4\12\1\101\3\12\1\102\1\103\1\104"+
    "\1\105\2\12\1\0\2\12\1\106\1\107\3\12\1\110"+
    "\1\12\1\0\1\111\1\12\1\112\2\12\1\113\1\114"+
    "\2\12\1\115\10\12\1\116\2\12\1\117";

  private static int [] zzUnpackAction() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u0136\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0136\0\u0326"+
    "\0\u0364\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516"+
    "\0\u0516\0\u041e\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a"+
    "\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0\0\u0136\0\u0136\0\u07fe"+
    "\0\u083c\0\u087a\0\u08b8\0\u08f6\0\u0934\0\u0972\0\u09b0\0\u09ee"+
    "\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0136\0\u0136\0\u0136\0\u0136"+
    "\0\u0136\0\u0136\0\u0136\0\u0136\0\u041e\0\u0136\0\u0b24\0\u0b62"+
    "\0\u0136\0\u0ba0\0\u0bde\0\u0136\0\u0136\0\u0c1c\0\u0c5a\0\u022e"+
    "\0\u0136\0\u0c98\0\u0cd6\0\u0d14\0\u0d52\0\u0d90\0\u0dce\0\u041e"+
    "\0\u0136\0\u041e\0\u041e\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0136"+
    "\0\u0f04\0\u0f42\0\u0f80\0\u0f80\0\u0136\0\u0fbe\0\u0ffc\0\u103a"+
    "\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a"+
    "\0\u1268\0\u0136\0\u12a6\0\u12e4\0\u0136\0\u1322\0\u1360\0\u0136"+
    "\0\u0136\0\u139e\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512"+
    "\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702"+
    "\0\u1740\0\u177e\0\u03e0\0\u17bc\0\u17fa\0\u1838\0\u1876\0\u18b4"+
    "\0\u18f2\0\u1930\0\u196e\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u1aa4"+
    "\0\u1ae2\0\u1b20\0\u0136\0\u0136\0\u0136\0\u0d14\0\u1b5e\0\u1b9c"+
    "\0\u1bda\0\u1c18\0\u0136\0\u0f80\0\u1c56\0\u0136\0\u1c94\0\u1cd2"+
    "\0\u1d10\0\u1d4e\0\u0dce\0\u1d8c\0\u0136\0\u11ae\0\u1dca\0\u12a6"+
    "\0\u1e08\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u03e0\0\u1f3e\0\u03e0"+
    "\0\u0136\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u03e0\0\u2074\0\u20b2"+
    "\0\u20f0\0\u212e\0\u216c\0\u21aa\0\u21e8\0\u2226\0\u2264\0\u22a2"+
    "\0\u22e0\0\u231e\0\u235c\0\u239a\0\u23d8\0\u2416\0\u2454\0\u2492"+
    "\0\u24d0\0\u03e0\0\u250e\0\u1c94\0\u254c\0\u1c56\0\u258a\0\u25c8"+
    "\0\u2606\0\u0136\0\u2644\0\u2682\0\u26c0\0\u26fe\0\u03e0\0\u273c"+
    "\0\u277a\0\u27b8\0\u27f6\0\u2834\0\u2872\0\u28b0\0\u28ee\0\u292c"+
    "\0\u296a\0\u29a8\0\u29e6\0\u2a24\0\u2a62\0\u2aa0\0\u2ade\0\u2b1c"+
    "\0\u2b5a\0\u0136\0\u2b98\0\u0136\0\u2bd6\0\u2c14\0\u2c52\0\u2c90"+
    "\0\u2cce\0\u03e0\0\u2d0c\0\u2d4a\0\u03e0\0\u2d88\0\u2dc6\0\u2e04"+
    "\0\u2e42\0\u2e80\0\u03e0\0\u2ebe\0\u2efc\0\u2f3a\0\u2f78\0\u2fb6"+
    "\0\u2ff4\0\u03e0\0\u3032\0\u3070\0\u30ae\0\u30ec\0\u03e0\0\u312a"+
    "\0\u3168\0\u31a6\0\u03e0\0\u03e0\0\u03e0\0\u03e0\0\u31e4\0\u3222"+
    "\0\u3260\0\u329e\0\u32dc\0\u03e0\0\u03e0\0\u331a\0\u3358\0\u3396"+
    "\0\u03e0\0\u33d4\0\u3412\0\u03e0\0\u3450\0\u03e0\0\u348e\0\u34cc"+
    "\0\u03e0\0\u0136\0\u350a\0\u3548\0\u03e0\0\u3586\0\u35c4\0\u3602"+
    "\0\u3640\0\u367e\0\u36bc\0\u36fa\0\u3738\0\u03e0\0\u3776\0\u37b4"+
    "\0\u03e0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\6\1\7\7\6\1\10\3\6\1\11\3\6\1\7"+
    "\1\6\2\7\1\6\4\7\1\6\1\12\1\13\3\14"+
    "\1\6\23\7\11\6\17\15\1\6\14\15\1\16\1\17"+
    "\1\20\2\21\35\15\1\6\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\32\2\34"+
    "\1\35\1\36\1\37\1\22\1\23\1\40\1\23\1\41"+
    "\1\22\1\23\1\42\1\23\1\43\1\44\1\45\1\46"+
    "\3\21\1\47\2\23\1\50\1\23\1\51\2\23\1\52"+
    "\1\53\1\54\1\55\1\56\1\23\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\11\76\1\77\1\100\21\76"+
    "\1\45\1\46\40\76\17\101\1\102\14\101\1\103\1\104"+
    "\3\101\1\105\34\101\77\0\2\7\4\0\1\7\11\0"+
    "\2\7\1\0\7\7\7\0\23\7\23\0\1\106\117\0"+
    "\1\107\1\110\74\0\1\107\1\111\76\0\3\14\35\0"+
    "\17\15\1\0\14\15\2\0\2\15\1\0\35\15\35\0"+
    "\1\17\40\0\17\15\1\0\14\15\2\0\2\20\1\21"+
    "\35\15\36\0\3\21\36\0\1\22\1\112\7\113\1\114"+
    "\3\113\3\0\1\22\1\112\1\0\2\112\1\22\2\112"+
    "\2\115\1\116\6\0\23\112\10\0\1\113\1\0\15\23"+
    "\1\117\2\0\2\23\1\0\7\23\7\0\23\23\10\0"+
    "\1\23\1\0\1\120\1\23\13\120\3\0\1\120\1\23"+
    "\1\0\2\23\1\120\4\23\7\0\23\23\10\0\1\120"+
    "\4\0\1\121\72\0\1\120\1\23\2\120\1\122\7\120"+
    "\1\123\3\0\1\120\1\23\1\0\2\23\1\120\4\23"+
    "\7\0\23\23\10\0\1\120\5\0\1\124\71\0\1\125"+
    "\5\0\2\126\10\0\1\125\4\0\1\125\4\0\1\127"+
    "\53\0\1\130\1\106\64\0\1\120\1\23\2\120\1\32"+
    "\10\120\3\0\1\120\1\23\1\0\2\23\1\120\4\23"+
    "\7\0\23\23\10\0\1\120\1\0\1\131\1\132\1\133"+
    "\1\0\1\134\3\0\1\133\1\0\3\133\1\135\2\0"+
    "\1\131\1\132\1\0\2\132\1\131\4\132\7\0\23\132"+
    "\10\0\1\133\1\0\1\136\1\137\1\140\1\0\1\141"+
    "\1\142\2\143\1\144\1\143\1\144\2\141\1\145\2\0"+
    "\1\136\1\137\1\0\2\137\1\136\4\137\7\0\23\137"+
    "\10\0\1\140\17\146\1\147\1\0\55\146\1\0\1\150"+
    "\17\0\1\150\1\151\1\152\3\150\1\153\1\154\2\150"+
    "\10\0\1\155\1\150\1\156\1\0\1\157\4\0\1\150"+
    "\1\153\1\0\1\150\5\0\1\160\1\0\1\161\7\0"+
    "\15\23\1\117\2\0\2\23\1\0\6\23\1\162\7\0"+
    "\7\23\1\163\13\23\10\0\1\23\1\0\15\23\1\117"+
    "\2\0\2\23\1\0\7\23\7\0\7\23\1\164\13\23"+
    "\10\0\1\23\1\0\15\23\1\117\2\0\2\23\1\0"+
    "\7\23\7\0\1\165\2\23\1\166\17\23\10\0\1\23"+
    "\1\0\1\167\5\0\2\170\10\0\1\167\4\0\1\167"+
    "\4\0\1\171\77\0\1\46\41\0\15\23\1\117\2\0"+
    "\2\23\1\0\7\23\7\0\13\23\1\172\5\23\1\173"+
    "\1\23\10\0\1\23\1\0\15\23\1\117\2\0\2\23"+
    "\1\0\6\23\1\174\7\0\7\23\1\175\10\23\1\176"+
    "\2\23\10\0\1\23\1\0\15\23\1\117\2\0\2\23"+
    "\1\0\6\23\1\177\7\0\11\23\1\200\1\23\1\201"+
    "\7\23\10\0\1\23\1\0\15\23\1\117\2\0\2\23"+
    "\1\0\6\23\1\202\7\0\23\23\10\0\1\23\1\0"+
    "\15\23\1\117\2\0\2\23\1\0\7\23\7\0\2\23"+
    "\1\203\20\23\10\0\1\23\1\0\15\23\1\117\2\0"+
    "\1\23\1\204\1\0\4\23\1\205\2\23\7\0\7\23"+
    "\1\206\3\23\1\207\7\23\10\0\1\23\1\0\15\23"+
    "\1\117\2\0\2\23\1\0\7\23\7\0\1\23\1\210"+
    "\21\23\10\0\1\23\1\0\15\23\1\117\2\0\2\23"+
    "\1\0\6\23\1\211\7\0\13\23\1\212\7\23\10\0"+
    "\1\23\1\0\15\23\1\117\2\0\2\23\1\0\7\23"+
    "\7\0\20\23\1\213\2\23\10\0\1\23\1\0\15\23"+
    "\1\117\2\0\2\23\1\0\4\23\1\214\1\23\1\215"+
    "\7\0\13\23\1\216\7\23\10\0\1\23\1\0\15\23"+
    "\1\117\2\0\2\23\1\0\4\23\1\217\2\23\7\0"+
    "\23\23\10\0\1\23\1\0\15\23\1\117\2\0\2\23"+
    "\1\0\7\23\7\0\3\23\1\220\1\221\16\23\10\0"+
    "\1\23\1\0\15\23\1\117\2\0\2\23\1\0\4\23"+
    "\1\222\2\23\7\0\23\23\10\0\1\23\12\0\1\223"+
    "\74\0\1\224\103\0\1\225\1\0\2\225\2\0\1\225"+
    "\2\0\1\225\1\0\1\225\6\0\1\225\1\0\3\225"+
    "\65\0\1\104\40\0\34\106\2\0\40\106\35\0\1\111"+
    "\41\0\1\113\1\23\13\113\3\0\1\113\1\23\1\0"+
    "\2\23\1\113\4\23\7\0\23\23\10\0\1\113\1\0"+
    "\1\113\1\112\13\113\3\0\1\113\1\112\1\0\2\112"+
    "\1\113\4\112\7\0\23\112\10\0\1\113\1\0\1\226"+
    "\1\112\13\113\3\0\1\226\1\112\1\0\2\112\1\226"+
    "\4\112\7\0\23\112\10\0\1\113\1\0\1\226\1\23"+
    "\4\113\2\227\5\113\3\0\1\226\1\23\1\0\2\23"+
    "\1\226\4\23\7\0\23\23\10\0\1\113\1\0\1\167"+
    "\5\0\2\170\10\0\1\167\4\0\1\167\2\0\2\230"+
    "\44\0\1\131\1\132\1\133\1\0\1\231\1\232\1\0"+
    "\1\233\1\234\1\233\1\234\2\231\1\235\2\0\1\131"+
    "\1\132\1\0\2\132\1\131\4\132\7\0\23\132\10\0"+
    "\1\133\5\0\1\236\71\0\1\125\10\0\1\237\6\0"+
    "\1\125\4\0\1\125\2\0\2\230\1\116\43\0\1\240"+
    "\17\0\1\240\4\0\1\240\50\0\1\167\5\0\2\170"+
    "\10\0\1\167\4\0\1\167\50\0\1\131\1\241\13\131"+
    "\3\0\1\131\1\241\1\0\2\241\1\131\4\241\7\0"+
    "\23\241\10\0\1\131\1\0\15\132\3\0\2\132\1\0"+
    "\7\132\7\0\23\132\10\0\1\132\1\0\1\133\1\132"+
    "\13\133\3\0\1\133\1\132\1\0\2\132\1\133\4\132"+
    "\7\0\23\132\10\0\1\133\1\0\1\136\1\242\13\136"+
    "\3\0\1\136\1\242\1\0\2\242\1\136\4\242\7\0"+
    "\23\242\10\0\1\136\1\0\15\137\1\243\2\0\2\137"+
    "\1\0\7\137\7\0\23\137\10\0\1\137\1\0\1\140"+
    "\1\137\13\140\3\0\1\140\1\137\1\0\2\137\1\140"+
    "\4\137\7\0\23\137\10\0\1\140\1\0\1\140\1\137"+
    "\2\140\1\144\10\140\1\243\2\0\1\140\1\137\1\0"+
    "\2\137\1\140\4\137\7\0\23\137\10\0\1\140\5\0"+
    "\1\244\10\0\1\243\75\0\1\243\60\0\1\140\1\137"+
    "\13\140\1\243\2\0\1\140\1\137\1\0\2\137\1\140"+
    "\4\137\7\0\23\137\10\0\1\140\5\0\1\143\110\0"+
    "\1\245\74\0\1\146\1\246\2\146\2\0\1\146\2\0"+
    "\1\146\1\0\1\146\10\0\3\146\31\0\1\150\17\0"+
    "\1\150\2\0\3\150\1\0\3\150\11\0\1\150\7\0"+
    "\1\150\2\0\1\150\50\0\1\247\64\0\1\250\4\0"+
    "\1\250\50\0\1\150\17\0\1\150\2\0\3\150\1\0"+
    "\3\150\11\0\1\150\4\0\1\251\2\0\1\150\2\0"+
    "\1\150\50\0\1\252\75\0\1\253\44\0\15\23\1\117"+
    "\2\0\2\23\1\0\7\23\7\0\10\23\1\254\12\23"+
    "\10\0\1\23\1\0\15\23\1\117\2\0\2\23\1\0"+
    "\7\23\7\0\13\23\1\255\7\23\10\0\1\23\1\0"+
    "\15\23\1\117\2\0\2\23\1\0\7\23\7\0\7\23"+
    "\1\256\13\23\10\0\1\23\1\0\15\23\1\117\2\0"+
    "\2\23\1\0\7\23\7\0\14\23\1\257\6\23\10\0"+
    "\1\23\1\0\15\23\1\117\2\0\2\23\1\0\7\23"+
    "\7\0\15\23\1\260\5\23\10\0\1\23\1\0\1\167"+
    "\17\0\1\167\4\0\1\167\2\0\2\230\44\0\1\167"+
    "\17\0\1\167\4\0\1\167\102\0\1\261\43\0\15\23"+
    "\1\117\2\0\1\23\1\203\1\0\7\23\7\0\23\23"+
    "\10\0\1\23\1\0\15\23\1\117\2\0\2\23\1\0"+
    "\7\23\7\0\3\23\1\262\17\23\10\0\1\23\1\0"+
    "\15\23\1\117\2\0\2\23\1\0\7\23\7\0\7\23"+
    "\1\263\13\23\10\0\1\23\1\0\15\23\1\117\2\0"+
    "\2\23\1\0\7\23\7\0\13\23\1\264\7\23\10\0"+
    "\1\23\1\0\15\23\1\117\2\0\2\23\1\0\4\23"+
    "\1\265\2\23\7\0\23\23\10\0\1\23\1\0\15\23"+
    "\1\117\2\0\2\23\1\0\7\23\7\0\1\23\1\266"+
    "\21\23\10\0\1\23\1\0\15\23\1\117\2\0\2\23"+
    "\1\0\1\23\1\267\5\23\7\0\23\23\10\0\1\23"+
    "\1\0\15\23\1\117\2\0\2\23\1\0\7\23\7\0"+
    "\12\23\1\270\10\23\10\0\1\23\1\0\15\23\1\117"+
    "\2\0\2\23\1\0\7\23\7\0\3\23\1\271\17\23"+
    "\10\0\1\23\1\0\15\23\1\117\2\0\2\23\1\0"+
    "\6\23\1\272\7\0\23\23\10\0\1\23\1\0\15\23"+
    "\1\117\2\0\2\23\1\0\7\23\7\0\4\23\1\273"+
    "\16\23\10\0\1\23\1\0\15\23\1\117\2\0\2\23"+
    "\1\0\4\23\1\274\2\23\7\0\23\23\10\0\1\23"+
    "\1\0\15\23\1\117\2\0\2\23\1\0\7\23\7\0"+
    "\3\23\1\275\10\23\1\276\6\23\10\0\1\23\1\0"+
    "\15\23\1\117\2\0\2\23\1\0\7\23\7\0\20\23"+
    "\1\277\2\23\10\0\1\23\1\0\15\23\1\117\2\0"+
    "\2\23\1\0\7\23\7\0\2\23\1\300\20\23\10\0"+
    "\1\23\1\0\15\23\1\117\2\0\2\23\1\0\7\23"+
    "\7\0\17\23\1\301\3\23\10\0\1\23\1\0\15\23"+
    "\1\117\2\0\2\23\1\0\6\23\1\302\7\0\11\23"+
    "\1\303\11\23\10\0\1\23\1\0\15\23\1\117\2\0"+
    "\2\23\1\0\7\23\7\0\12\23\1\304\10\23\10\0"+
    "\1\23\1\0\15\23\1\117\2\0\2\23\1\0\7\23"+
    "\7\0\1\23\1\305\21\23\10\0\1\23\1\0\15\23"+
    "\1\117\2\0\2\23\1\0\7\23\7\0\15\23\1\306"+
    "\5\23\10\0\1\23\1\0\15\23\1\117\2\0\2\23"+
    "\1\0\7\23\7\0\3\23\1\307\17\23\10\0\1\23"+
    "\1\0\15\23\1\117\2\0\2\23\1\0\7\23\7\0"+
    "\1\23\1\310\5\23\1\311\13\23\10\0\1\23\1\0"+
    "\15\23\1\117\2\0\2\23\1\0\6\23\1\312\7\0"+
    "\23\23\10\0\1\23\1\0\15\23\1\117\2\0\1\23"+
    "\1\313\1\0\7\23\7\0\23\23\10\0\1\23\1\0"+
    "\1\226\1\112\4\113\2\114\5\113\3\0\1\226\1\112"+
    "\1\0\2\112\1\226\4\112\7\0\23\112\10\0\1\113"+
    "\1\0\1\314\5\0\2\315\10\0\1\314\4\0\1\314"+
    "\50\0\1\133\1\132\2\133\1\234\10\133\3\0\1\133"+
    "\1\132\1\0\2\132\1\133\4\132\7\0\23\132\10\0"+
    "\1\133\5\0\1\316\75\0\1\233\71\0\1\314\17\0"+
    "\1\314\4\0\1\314\50\0\1\240\17\0\1\240\4\0"+
    "\1\240\2\0\2\230\1\116\43\0\1\131\1\132\13\131"+
    "\3\0\1\131\1\132\1\0\2\132\1\131\4\132\7\0"+
    "\23\132\10\0\1\131\1\0\1\136\1\137\13\136\3\0"+
    "\1\136\1\137\1\0\2\137\1\136\4\137\7\0\23\137"+
    "\10\0\1\136\5\0\1\143\10\0\1\243\125\0\1\317"+
    "\100\0\1\320\66\0\1\321\103\0\1\322\26\0\15\23"+
    "\1\117\2\0\2\23\1\0\7\23\7\0\11\23\1\302"+
    "\11\23\10\0\1\23\1\0\15\23\1\117\2\0\2\23"+
    "\1\0\7\23\7\0\12\23\1\323\10\23\10\0\1\23"+
    "\1\0\15\23\1\117\2\0\2\23\1\0\7\23\7\0"+
    "\13\23\1\324\7\23\10\0\1\23\1\0\15\23\1\117"+
    "\2\0\2\23\1\0\7\23\7\0\12\23\1\325\10\23"+
    "\10\0\1\23\1\0\15\23\1\117\2\0\2\23\1\0"+
    "\6\23\1\326\7\0\23\23\10\0\1\23\1\0\15\23"+
    "\1\117\2\0\2\23\1\0\7\23\7\0\1\23\1\327"+
    "\21\23\10\0\1\23\1\0\15\23\1\117\2\0\1\23"+
    "\1\330\1\0\7\23\7\0\23\23\10\0\1\23\1\0"+
    "\15\23\1\117\2\0\1\23\1\331\1\0\7\23\7\0"+
    "\23\23\10\0\1\23\1\0\15\23\1\117\2\0\2\23"+
    "\1\0\4\23\1\332\2\23\7\0\23\23\10\0\1\23"+
    "\1\0\15\23\1\117\2\0\2\23\1\0\6\23\1\333"+
    "\7\0\23\23\10\0\1\23\1\0\15\23\1\117\2\0"+
    "\2\23\1\0\4\23\1\334\2\23\7\0\23\23\10\0"+
    "\1\23\1\0\15\23\1\117\2\0\2\23\1\0\6\23"+
    "\1\203\7\0\23\23\10\0\1\23\1\0\15\23\1\117"+
    "\2\0\2\23\1\0\7\23\7\0\4\23\1\335\16\23"+
    "\10\0\1\23\1\0\15\23\1\117\2\0\2\23\1\0"+
    "\7\23\7\0\4\23\1\336\16\23\10\0\1\23\1\0"+
    "\15\23\1\117\2\0\2\23\1\0\7\23\7\0\6\23"+
    "\1\337\14\23\10\0\1\23\1\0\15\23\1\117\2\0"+
    "\2\23\1\0\6\23\1\340\7\0\23\23\10\0\1\23"+
    "\1\0\15\23\1\117\2\0\2\23\1\0\7\23\7\0"+
    "\11\23\1\341\11\23\10\0\1\23\1\0\15\23\1\117"+
    "\2\0\2\23\1\0\4\23\1\342\2\23\7\0\23\23"+
    "\10\0\1\23\1\0\15\23\1\117\2\0\2\23\1\0"+
    "\7\23\7\0\3\23\1\203\17\23\10\0\1\23\1\0"+
    "\15\23\1\117\2\0\2\23\1\0\7\23\7\0\7\23"+
    "\1\273\13\23\10\0\1\23\1\0\15\23\1\117\2\0"+
    "\1\23\1\343\1\0\7\23\7\0\23\23\10\0\1\23"+
    "\1\0\15\23\1\117\2\0\2\23\1\0\7\23\7\0"+
    "\20\23\1\344\2\23\10\0\1\23\1\0\15\23\1\117"+
    "\2\0\2\23\1\0\7\23\7\0\21\23\1\345\1\23"+
    "\10\0\1\23\1\0\15\23\1\117\2\0\2\23\1\0"+
    "\7\23\7\0\15\23\1\346\5\23\10\0\1\23\1\0"+
    "\15\23\1\117\2\0\2\23\1\0\7\23\7\0\11\23"+
    "\1\347\11\23\10\0\1\23\1\0\15\23\1\117\2\0"+
    "\2\23\1\0\6\23\1\350\7\0\23\23\10\0\1\23"+
    "\1\0\15\23\1\117\2\0\2\23\1\0\7\23\7\0"+
    "\11\23\1\351\11\23\10\0\1\23\1\0\1\314\5\0"+
    "\2\237\10\0\1\314\4\0\1\314\112\0\1\352\41\0"+
    "\1\353\131\0\1\354\33\0\15\23\1\117\2\0\2\23"+
    "\1\0\7\23\7\0\5\23\1\203\15\23\10\0\1\23"+
    "\1\0\15\23\1\117\2\0\1\23\1\355\1\0\7\23"+
    "\7\0\23\23\10\0\1\23\1\0\15\23\1\117\2\0"+
    "\2\23\1\0\7\23\7\0\1\23\1\356\21\23\10\0"+
    "\1\23\1\0\15\23\1\117\2\0\2\23\1\0\7\23"+
    "\7\0\12\23\1\357\10\23\10\0\1\23\1\0\15\23"+
    "\1\117\2\0\2\23\1\0\6\23\1\360\7\0\23\23"+
    "\10\0\1\23\1\0\15\23\1\117\2\0\2\23\1\0"+
    "\4\23\1\361\2\23\7\0\23\23\10\0\1\23\1\0"+
    "\15\23\1\117\2\0\2\23\1\0\7\23\7\0\7\23"+
    "\1\362\13\23\10\0\1\23\1\0\15\23\1\117\2\0"+
    "\1\23\1\363\1\0\7\23\7\0\23\23\10\0\1\23"+
    "\1\0\15\23\1\117\2\0\2\23\1\0\7\23\7\0"+
    "\1\23\1\364\21\23\10\0\1\23\1\0\15\23\1\117"+
    "\2\0\2\23\1\0\7\23\7\0\4\23\1\365\16\23"+
    "\10\0\1\23\1\0\15\23\1\117\2\0\2\23\1\0"+
    "\7\23\7\0\1\23\1\366\21\23\10\0\1\23\1\0"+
    "\6\23\1\367\6\23\1\117\2\0\2\23\1\0\7\23"+
    "\7\0\23\23\10\0\1\23\1\0\15\23\1\117\2\0"+
    "\1\23\1\370\1\0\7\23\7\0\23\23\10\0\1\23"+
    "\1\0\15\23\1\117\2\0\2\23\1\0\7\23\7\0"+
    "\3\23\1\371\17\23\10\0\1\23\1\0\15\23\1\117"+
    "\2\0\2\23\1\0\7\23\7\0\11\23\1\372\11\23"+
    "\10\0\1\23\1\0\15\23\1\117\2\0\2\23\1\0"+
    "\7\23\7\0\13\23\1\373\7\23\10\0\1\23\1\0"+
    "\15\23\1\117\2\0\2\23\1\0\7\23\7\0\13\23"+
    "\1\374\7\23\10\0\1\23\1\0\15\23\1\117\2\0"+
    "\2\23\1\0\7\23\7\0\7\23\1\375\13\23\10\0"+
    "\1\23\1\0\15\23\1\117\2\0\2\23\1\0\7\23"+
    "\7\0\7\23\1\376\13\23\10\0\1\23\1\0\15\23"+
    "\1\117\2\0\2\23\1\0\7\23\7\0\7\23\1\203"+
    "\13\23\10\0\1\23\1\0\15\23\1\117\2\0\2\23"+
    "\1\0\7\23\7\0\4\23\1\377\16\23\10\0\1\23"+
    "\1\0\15\23\1\117\2\0\2\23\1\0\4\23\1\u0100"+
    "\2\23\7\0\23\23\10\0\1\23\47\0\1\u0101\27\0"+
    "\15\23\1\117\2\0\2\23\1\0\7\23\7\0\1\23"+
    "\1\u0102\21\23\10\0\1\23\1\0\15\23\1\117\2\0"+
    "\2\23\1\0\7\23\7\0\11\23\1\u0103\11\23\10\0"+
    "\1\23\1\0\15\23\1\117\2\0\2\23\1\0\7\23"+
    "\7\0\1\23\1\203\21\23\10\0\1\23\1\0\15\23"+
    "\1\117\2\0\2\23\1\0\7\23\7\0\15\23\1\u0104"+
    "\5\23\10\0\1\23\1\0\15\23\1\117\2\0\1\23"+
    "\1\u0105\1\0\7\23\7\0\23\23\10\0\1\23\1\0"+
    "\15\23\1\117\2\0\2\23\1\0\7\23\7\0\11\23"+
    "\1\u0106\11\23\10\0\1\23\1\0\15\23\1\117\2\0"+
    "\2\23\1\0\6\23\1\u0107\7\0\23\23\10\0\1\23"+
    "\1\0\15\23\1\117\2\0\2\23\1\0\4\23\1\u0108"+
    "\2\23\7\0\23\23\10\0\1\23\1\0\15\23\1\117"+
    "\2\0\2\23\1\0\7\23\7\0\15\23\1\u0109\5\23"+
    "\10\0\1\23\1\0\15\23\1\117\2\0\2\23\1\0"+
    "\7\23\7\0\16\23\1\u010a\4\23\10\0\1\23\1\0"+
    "\15\23\1\117\2\0\2\23\1\0\6\23\1\u010b\7\0"+
    "\23\23\10\0\1\23\1\0\15\23\1\117\2\0\2\23"+
    "\1\0\7\23\7\0\3\23\1\u010c\17\23\10\0\1\23"+
    "\1\0\15\23\1\117\2\0\2\23\1\0\7\23\7\0"+
    "\15\23\1\u010d\5\23\10\0\1\23\1\0\15\23\1\117"+
    "\2\0\2\23\1\0\6\23\1\u010e\7\0\23\23\10\0"+
    "\1\23\1\0\15\23\1\117\2\0\2\23\1\0\6\23"+
    "\1\u010f\7\0\23\23\10\0\1\23\1\0\15\23\1\117"+
    "\2\0\2\23\1\0\7\23\7\0\4\23\1\203\16\23"+
    "\10\0\1\23\1\0\15\23\1\117\2\0\2\23\1\0"+
    "\1\23\1\u0110\5\23\7\0\23\23\10\0\1\23\32\0"+
    "\1\u0111\44\0\15\23\1\117\2\0\2\23\1\0\7\23"+
    "\7\0\13\23\1\u0112\7\23\10\0\1\23\1\0\6\23"+
    "\1\u0113\6\23\1\117\2\0\2\23\1\0\7\23\7\0"+
    "\23\23\10\0\1\23\1\0\15\23\1\117\2\0\2\23"+
    "\1\0\7\23\7\0\6\23\1\u0114\14\23\10\0\1\23"+
    "\1\0\15\23\1\117\2\0\2\23\1\0\7\23\7\0"+
    "\12\23\1\u0115\10\23\10\0\1\23\1\0\15\23\1\117"+
    "\2\0\2\23\1\0\7\23\7\0\3\23\1\u0116\17\23"+
    "\10\0\1\23\1\0\15\23\1\117\2\0\2\23\1\0"+
    "\7\23\7\0\13\23\1\u0117\7\23\10\0\1\23\1\0"+
    "\15\23\1\117\2\0\2\23\1\0\7\23\7\0\11\23"+
    "\1\u0118\11\23\10\0\1\23\1\0\15\23\1\117\2\0"+
    "\1\23\1\u0119\1\0\7\23\7\0\23\23\10\0\1\23"+
    "\1\0\15\23\1\117\2\0\2\23\1\0\7\23\7\0"+
    "\7\23\1\u011a\13\23\10\0\1\23\50\0\1\u011b\26\0"+
    "\15\23\1\117\2\0\2\23\1\0\7\23\7\0\3\23"+
    "\1\u011c\17\23\10\0\1\23\1\0\15\23\1\117\2\0"+
    "\2\23\1\0\7\23\7\0\4\23\1\u011d\16\23\10\0"+
    "\1\23\1\0\15\23\1\117\2\0\2\23\1\0\7\23"+
    "\7\0\1\23\1\u011e\21\23\10\0\1\23\1\0\15\23"+
    "\1\117\2\0\2\23\1\0\7\23\7\0\16\23\1\u011f"+
    "\4\23\10\0\1\23\1\0\15\23\1\117\2\0\2\23"+
    "\1\0\7\23\7\0\4\23\1\u0120\16\23\10\0\1\23"+
    "\1\0\15\23\1\117\2\0\2\23\1\0\6\23\1\u0121"+
    "\7\0\23\23\10\0\1\23\46\0\1\u0122\30\0\15\23"+
    "\1\117\2\0\2\23\1\0\7\23\7\0\6\23\1\u0123"+
    "\14\23\10\0\1\23\1\0\15\23\1\117\2\0\2\23"+
    "\1\0\7\23\7\0\3\23\1\u0124\17\23\10\0\1\23"+
    "\1\0\15\23\1\117\2\0\2\23\1\0\6\23\1\u0125"+
    "\7\0\23\23\10\0\1\23\1\0\15\23\1\117\2\0"+
    "\2\23\1\0\7\23\7\0\17\23\1\u0126\3\23\10\0"+
    "\1\23\1\0\6\23\1\u0127\6\23\1\117\2\0\2\23"+
    "\1\0\7\23\7\0\23\23\10\0\1\23\1\0\15\23"+
    "\1\117\2\0\2\23\1\0\1\23\1\u0128\5\23\7\0"+
    "\23\23\10\0\1\23\1\0\15\23\1\117\2\0\2\23"+
    "\1\0\7\23\7\0\17\23\1\u0129\3\23\10\0\1\23"+
    "\1\0\15\23\1\117\2\0\2\23\1\0\7\23\7\0"+
    "\13\23\1\u012a\7\23\10\0\1\23\1\0\15\23\1\117"+
    "\2\0\2\23\1\0\6\23\1\u012b\7\0\23\23\10\0"+
    "\1\23\1\0\15\23\1\117\2\0\2\23\1\0\7\23"+
    "\7\0\7\23\1\u012c\13\23\10\0\1\23\1\0\15\23"+
    "\1\117\2\0\2\23\1\0\7\23\7\0\1\23\1\u012d"+
    "\21\23\10\0\1\23\1\0\15\23\1\117\2\0\2\23"+
    "\1\0\7\23\7\0\4\23\1\u012e\16\23\10\0\1\23"+
    "\1\0\15\23\1\117\2\0\2\23\1\0\7\23\7\0"+
    "\20\23\1\u012f\2\23\10\0\1\23\1\0\15\23\1\117"+
    "\2\0\2\23\1\0\7\23\7\0\13\23\1\u0130\7\23"+
    "\10\0\1\23\1\0\15\23\1\117\2\0\2\23\1\0"+
    "\7\23\7\0\15\23\1\u0131\5\23\10\0\1\23";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14322];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\2\1\1\11\5\1\1\11\26\1\2\11"+
    "\15\1\10\11\1\1\1\11\2\1\1\11\2\1\2\11"+
    "\3\1\1\11\4\0\2\1\1\0\1\11\4\1\2\0"+
    "\1\11\1\0\1\1\1\0\1\1\1\11\1\0\1\1"+
    "\1\0\4\1\3\0\1\1\1\0\1\11\1\0\1\1"+
    "\1\11\2\0\2\11\6\1\2\0\31\1\3\11\1\1"+
    "\2\0\1\1\1\0\1\11\1\1\1\0\1\11\5\0"+
    "\1\1\1\11\1\1\1\0\1\1\3\0\5\1\1\11"+
    "\33\1\1\0\1\1\3\0\1\11\27\1\1\11\1\0"+
    "\1\11\24\1\1\0\17\1\1\0\11\1\1\0\6\1"+
    "\1\11\17\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    int commentLevel = 0;


  DylanLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  DylanLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 25: 
          { return DylanTypes.RBRACE;
          }
        case 80: break;
        case 66: 
          { return DylanTypes.DEFINE;
          }
        case 81: break;
        case 23: 
          { return DylanTypes.RBRACKET;
          }
        case 82: break;
        case 24: 
          { return DylanTypes.LBRACE;
          }
        case 83: break;
        case 45: 
          { return DylanTypes.HASH_PAREN;
          }
        case 84: break;
        case 56: 
          { return DylanTypes.USE;
          }
        case 85: break;
        case 79: 
          { return DylanTypes.COPY_DOWN_METHOD;
          }
        case 86: break;
        case 65: 
          { return DylanTypes.CREATE;
          }
        case 87: break;
        case 19: 
          { yybegin(STRING); return DylanTypes.STRING_CHARACTER;
          }
        case 88: break;
        case 46: 
          { return DylanTypes.HASH_BRACKET;
          }
        case 89: break;
        case 31: 
          { yybegin(DYLAN_CODE); return DylanTypes.CRLF;
          }
        case 90: break;
        case 47: 
          { return DylanTypes.NONDEFINING_BEGIN_WORD;
          }
        case 91: break;
        case 28: 
          { return DylanTypes.VARIABLE_IGNORE;
          }
        case 92: break;
        case 77: 
          { return DylanTypes.OTHERWISE;
          }
        case 93: break;
        case 60: 
          { return DylanTypes.HASH_NEXT;
          }
        case 94: break;
        case 51: 
          { return DylanTypes.CHARACTER_LITERAL;
          }
        case 95: break;
        case 21: 
          { return DylanTypes.RPAREN;
          }
        case 96: break;
        case 22: 
          { return DylanTypes.LBRACKET;
          }
        case 97: break;
        case 41: 
          { return DylanTypes.ESCAPED_WORD;
          }
        case 98: break;
        case 29: 
          { return DylanTypes.COMMENT;
          }
        case 99: break;
        case 30: 
          { return DylanTypes.STRING_CHARACTER;
          }
        case 100: break;
        case 17: 
          { return DylanTypes.DOT;
          }
        case 101: break;
        case 5: 
          { yybegin(WAITING_VALUE); return TokenType.WHITE_SPACE;
          }
        case 102: break;
        case 43: 
          { return DylanTypes.HASH_HASH;
          }
        case 103: break;
        case 44: 
          { return DylanTypes.HASH_T;
          }
        case 104: break;
        case 8: 
          { return TokenType.WHITE_SPACE;
          }
        case 105: break;
        case 39: 
          { return DylanTypes.CONSTRAINED_NAME;
          }
        case 106: break;
        case 40: 
          { return DylanTypes.COLON_COLON;
          }
        case 107: break;
        case 20: 
          { return DylanTypes.LPAREN;
          }
        case 108: break;
        case 50: 
          { return DylanTypes.STRING_ESCAPE_CHARACTER;
          }
        case 109: break;
        case 48: 
          { commentLevel--; if (commentLevel == 0) { yybegin(DYLAN_CODE);} return DylanTypes.COMMENT;
          }
        case 110: break;
        case 58: 
          { return DylanTypes.SLOT;
          }
        case 111: break;
        case 12: 
          { return DylanTypes.EQUAL;
          }
        case 112: break;
        case 61: 
          { return DylanTypes.LOCAL;
          }
        case 113: break;
        case 34: 
          { return DylanTypes.KEYWORD;
          }
        case 114: break;
        case 72: 
          { return DylanTypes.HANDLER_T;
          }
        case 115: break;
        case 9: 
          { return DylanTypes.NUMBER;
          }
        case 116: break;
        case 75: 
          { return DylanTypes.VARIABLE_T;
          }
        case 117: break;
        case 11: 
          { return DylanTypes.QUERY;
          }
        case 118: break;
        case 3: 
          { yybegin(WAITING_VALUE); return DylanTypes.HEADER_SEPARATOR;
          }
        case 119: break;
        case 33: 
          { yybegin(DYLAN_CODE); return  DylanTypes.CRLF;
          }
        case 120: break;
        case 59: 
          { return DylanTypes.HASH_REST;
          }
        case 121: break;
        case 10: 
          { return DylanTypes.NONDEFINING_NONEXPRESSION_WORD;
          }
        case 122: break;
        case 64: 
          { return DylanTypes.EXPORT;
          }
        case 123: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 124: break;
        case 57: 
          { return DylanTypes.HASH_KEY;
          }
        case 125: break;
        case 52: 
          { return DylanTypes.ALL;
          }
        case 126: break;
        case 7: 
          { yybegin(YYINITIAL); return DylanTypes.CRLF;
          }
        case 127: break;
        case 38: 
          { yybegin(COMMENT_BLOCK); commentLevel++; return DylanTypes.COMMENT;
          }
        case 128: break;
        case 63: 
          { return DylanTypes.MACRO_T;
          }
        case 129: break;
        case 26: 
          { return DylanTypes.COMMA;
          }
        case 130: break;
        case 54: 
          { return DylanTypes.ELLIPSIS;
          }
        case 131: break;
        case 37: 
          { return DylanTypes.EQUAL_ARROW;
          }
        case 132: break;
        case 73: 
          { return DylanTypes.FUNCTION;
          }
        case 133: break;
        case 18: 
          { /* return DylanTypes.CRLF; */
          }
        case 134: break;
        case 74: 
          { return DylanTypes.CONSTANT_T;
          }
        case 135: break;
        case 14: 
          { return DylanTypes.UNARY_AND_BINARY_OPERATOR;
          }
        case 136: break;
        case 6: 
          { yybegin(YYINITIAL); return DylanTypes.VALUE;
          }
        case 137: break;
        case 27: 
          { return DylanTypes.SEMICOLON;
          }
        case 138: break;
        case 49: 
          { commentLevel++; yybegin(COMMENT_BLOCK); return DylanTypes.COMMENT;
          }
        case 139: break;
        case 67: 
          { return DylanTypes.DOMAIN;
          }
        case 140: break;
        case 78: 
          { return DylanTypes.SHARED_SYMBOLS_T;
          }
        case 141: break;
        case 70: 
          { return DylanTypes.LIBRARY;
          }
        case 142: break;
        case 36: 
          { return DylanTypes.EQUAL_EQUAL;
          }
        case 143: break;
        case 62: 
          { return DylanTypes.CLASS;
          }
        case 144: break;
        case 55: 
          { return DylanTypes.LET;
          }
        case 145: break;
        case 15: 
          { return DylanTypes.BINARY_OPERATOR_ONLY;
          }
        case 146: break;
        case 71: 
          { return DylanTypes.GENERIC;
          }
        case 147: break;
        case 69: 
          { return DylanTypes.MODULE;
          }
        case 148: break;
        case 32: 
          { yybegin(DYLAN_CODE); return DylanTypes.STRING_CHARACTER;
          }
        case 149: break;
        case 13: 
          { return DylanTypes.UNARY_OPERATOR_ONLY;
          }
        case 150: break;
        case 35: 
          { return DylanTypes.QUERY_QUERY;
          }
        case 151: break;
        case 4: 
          { return DylanTypes.CRLF;
          }
        case 152: break;
        case 53: 
          { return DylanTypes.END;
          }
        case 153: break;
        case 68: 
          { return DylanTypes.METHOD;
          }
        case 154: break;
        case 2: 
          { return DylanTypes.KEY;
          }
        case 155: break;
        case 76: 
          { return DylanTypes.HASH_ALL_KEYS;
          }
        case 156: break;
        case 42: 
          { return DylanTypes.OPERATOR_NAME;
          }
        case 157: break;
        case 16: 
          { return DylanTypes.HASH;
          }
        case 158: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
