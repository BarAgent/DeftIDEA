/* The following code was generated by JFlex 1.4.3 on 10/4/13 5:53 PM */

package org.dylanfoundry.deft.filetypes.dylan;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.dylanfoundry.deft.filetypes.dylan.psi.DylanTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/4/13 5:53 PM from the specification file
 * <tt>/home/cek/Dev/dylan-lang/DeftIDEA/src/org/dylanfoundry/deft/filetypes/dylan/Dylan.flex</tt>
 */
class DylanLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int WAITING_VALUE = 2;
  public static final int STRING = 8;
  public static final int YYINITIAL = 0;
  public static final int DYLAN_CODE = 4;
  public static final int SYMBOL = 10;
  public static final int COMMENT_BLOCK = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\36\1\35\1\0\1\40\1\34\22\0\1\37\1\3\1\41"+
    "\1\23\2\3\1\13\1\20\1\64\1\65\1\11\1\10\1\72\1\7"+
    "\1\33\1\12\1\21\1\26\6\26\2\1\1\16\1\73\1\14\1\5"+
    "\1\15\1\4\1\3\1\24\1\24\2\24\1\31\1\24\10\2\1\27"+
    "\13\2\1\66\1\17\1\67\1\13\1\3\1\0\1\30\1\25\1\54"+
    "\1\55\1\32\1\43\1\52\1\57\1\53\1\2\1\47\1\51\1\62"+
    "\1\44\1\56\2\2\1\22\1\46\1\42\1\61\1\63\1\60\1\45"+
    "\1\50\1\2\1\70\1\13\1\71\1\6\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\1\1\1\3\2\4\1\5\1\6"+
    "\2\7\2\10\1\11\1\12\1\1\1\13\1\14\1\15"+
    "\1\16\4\17\4\1\2\12\1\20\2\21\1\22\15\12"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\3\33\3\34\1\35\1\36\3\37\1\40\1\33\3\41"+
    "\4\0\1\11\1\37\1\0\1\42\1\43\1\44\1\17"+
    "\1\11\2\0\1\45\1\0\1\46\1\0\1\17\1\47"+
    "\1\0\1\50\1\0\4\51\3\0\1\11\1\0\1\52"+
    "\1\0\1\11\1\53\1\54\2\0\1\55\1\56\4\12"+
    "\1\11\2\0\7\12\1\57\14\12\1\60\1\61\1\11"+
    "\2\0\1\46\1\0\2\46\1\0\1\17\5\0\1\51"+
    "\1\62\1\0\1\11\3\0\2\12\1\63\1\12\1\64"+
    "\3\12\1\65\20\12\1\11\1\0\1\46\3\0\1\66"+
    "\1\12\1\57\2\12\1\67\15\12\1\70\1\0\1\71"+
    "\2\12\1\72\1\12\1\73\6\12\1\74\2\12\1\0"+
    "\3\12\1\75\1\76\3\12\1\0\3\12\1\77\1\12"+
    "\1\0\1\12\1\100\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\u0168\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0168"+
    "\0\u0348\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec"+
    "\0\u0528\0\u0528\0\u0438\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654"+
    "\0\u0690\0\u06cc\0\u0708\0\u0744\0\u0780\0\u0168\0\u0168\0\u07bc"+
    "\0\u07f8\0\u0834\0\u0870\0\u08ac\0\u08e8\0\u0924\0\u0960\0\u099c"+
    "\0\u09d8\0\u0a14\0\u0a50\0\u0a8c\0\u0168\0\u0168\0\u0168\0\u0168"+
    "\0\u0168\0\u0168\0\u0168\0\u0168\0\u0168\0\u0ac8\0\u0b04\0\u0168"+
    "\0\u0b40\0\u0b7c\0\u0168\0\u0168\0\u0168\0\u0bb8\0\u0b7c\0\u0168"+
    "\0\u0bf4\0\u0c30\0\u0258\0\u0168\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20"+
    "\0\u0d5c\0\u0d98\0\u0438\0\u0168\0\u0438\0\u0438\0\u0dd4\0\u0e10"+
    "\0\u0e4c\0\u0e88\0\u0168\0\u0ec4\0\u0f00\0\u0f3c\0\u0f3c\0\u0168"+
    "\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c"+
    "\0\u1158\0\u1194\0\u11d0\0\u120c\0\u0168\0\u1248\0\u1284\0\u0168"+
    "\0\u0168\0\u12c0\0\u12fc\0\u0168\0\u0168\0\u1338\0\u1374\0\u13b0"+
    "\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u1554\0\u1590"+
    "\0\u15cc\0\u1608\0\u1644\0\u03fc\0\u1680\0\u16bc\0\u16f8\0\u1734"+
    "\0\u1770\0\u17ac\0\u17e8\0\u1824\0\u1860\0\u189c\0\u18d8\0\u1914"+
    "\0\u0168\0\u0168\0\u0ce4\0\u1950\0\u198c\0\u19c8\0\u1a04\0\u0168"+
    "\0\u0f3c\0\u1a40\0\u0168\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30\0\u0d98"+
    "\0\u1b6c\0\u0168\0\u1ba8\0\u1248\0\u1be4\0\u1c20\0\u1c5c\0\u1c98"+
    "\0\u1cd4\0\u03fc\0\u1d10\0\u0168\0\u1d4c\0\u1d88\0\u1dc4\0\u03fc"+
    "\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4"+
    "\0\u1fe0\0\u201c\0\u2058\0\u2094\0\u20d0\0\u210c\0\u2148\0\u2184"+
    "\0\u1a7c\0\u21c0\0\u1a40\0\u21fc\0\u2238\0\u2274\0\u0168\0\u22b0"+
    "\0\u22ec\0\u2328\0\u2364\0\u03fc\0\u23a0\0\u23dc\0\u2418\0\u2454"+
    "\0\u2490\0\u24cc\0\u2508\0\u2544\0\u2580\0\u25bc\0\u25f8\0\u2634"+
    "\0\u2670\0\u0168\0\u26ac\0\u0168\0\u26e8\0\u2724\0\u03fc\0\u2760"+
    "\0\u03fc\0\u279c\0\u27d8\0\u2814\0\u2850\0\u288c\0\u28c8\0\u03fc"+
    "\0\u2904\0\u2940\0\u297c\0\u29b8\0\u29f4\0\u2a30\0\u03fc\0\u03fc"+
    "\0\u2a6c\0\u2aa8\0\u2ae4\0\u2b20\0\u2b5c\0\u2b98\0\u2bd4\0\u03fc"+
    "\0\u2c10\0\u2c4c\0\u2c88\0\u0168\0\u03fc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\7\1\10\7\7\1\11\3\7\1\12\3\7\1\10"+
    "\1\7\2\10\1\7\4\10\1\7\1\13\1\14\3\15"+
    "\1\7\22\10\10\7\17\16\1\7\14\16\1\17\1\20"+
    "\1\21\2\22\33\16\1\7\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\33\2\35"+
    "\1\36\1\37\1\40\1\23\1\24\1\41\1\24\1\42"+
    "\1\23\3\24\1\43\1\44\1\45\1\46\3\22\1\47"+
    "\1\24\1\50\2\24\1\51\2\24\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\11\75\1\76\1\77\21\75\1\45\1\46\36\75\17\100"+
    "\1\101\14\100\1\102\1\103\3\100\1\104\32\100\17\105"+
    "\1\106\14\105\1\107\1\103\3\105\1\110\32\105\75\0"+
    "\2\10\4\0\1\10\11\0\2\10\1\0\7\10\7\0"+
    "\22\10\22\0\1\111\115\0\1\112\1\113\72\0\1\112"+
    "\1\114\74\0\3\15\33\0\17\16\1\0\14\16\2\0"+
    "\2\16\1\0\33\16\35\0\1\20\36\0\17\16\1\0"+
    "\14\16\2\0\2\21\1\22\33\16\36\0\3\22\34\0"+
    "\1\23\1\115\7\116\1\117\3\116\3\0\1\23\1\115"+
    "\1\0\2\115\1\23\2\115\2\120\1\121\6\0\22\115"+
    "\11\0\15\24\1\122\2\0\2\24\1\0\7\24\7\0"+
    "\22\24\11\0\1\123\1\24\13\123\3\0\1\123\1\24"+
    "\1\0\2\24\1\123\4\24\7\0\22\24\14\0\1\124"+
    "\70\0\1\123\1\24\2\123\1\125\7\123\1\126\3\0"+
    "\1\123\1\24\1\0\2\24\1\123\4\24\7\0\22\24"+
    "\15\0\1\127\67\0\1\130\5\0\2\131\10\0\1\130"+
    "\4\0\1\130\4\0\1\132\51\0\1\133\1\111\62\0"+
    "\1\123\1\24\2\123\1\33\10\123\3\0\1\123\1\24"+
    "\1\0\2\24\1\123\4\24\7\0\22\24\11\0\1\134"+
    "\1\135\1\136\1\0\1\137\3\0\1\136\1\0\3\136"+
    "\1\140\2\0\1\134\1\135\1\0\2\135\1\134\4\135"+
    "\7\0\22\135\11\0\1\141\1\142\1\143\1\0\1\144"+
    "\1\145\2\146\1\147\1\146\1\147\2\144\1\150\2\0"+
    "\1\141\1\142\1\0\2\142\1\141\4\142\7\0\22\142"+
    "\10\0\17\151\1\152\1\0\53\151\1\0\1\153\17\0"+
    "\1\153\1\154\1\155\3\153\1\156\1\157\2\153\6\0"+
    "\1\160\1\161\1\153\1\162\2\0\1\163\4\0\2\153"+
    "\1\156\5\0\1\164\1\0\1\165\6\0\15\24\1\122"+
    "\2\0\2\24\1\0\6\24\1\166\7\0\7\24\1\167"+
    "\12\24\11\0\15\24\1\122\2\0\2\24\1\0\7\24"+
    "\7\0\2\24\1\170\4\24\1\171\12\24\11\0\1\172"+
    "\5\0\2\173\10\0\1\172\4\0\1\172\4\0\1\174"+
    "\75\0\1\46\37\0\15\24\1\122\2\0\2\24\1\0"+
    "\7\24\7\0\14\24\1\175\2\24\1\176\2\24\11\0"+
    "\15\24\1\122\2\0\2\24\1\0\6\24\1\177\7\0"+
    "\7\24\1\200\12\24\11\0\15\24\1\122\2\0\2\24"+
    "\1\0\6\24\1\201\7\0\14\24\1\202\5\24\11\0"+
    "\15\24\1\122\2\0\2\24\1\0\6\24\1\203\7\0"+
    "\22\24\11\0\15\24\1\122\2\0\2\24\1\0\7\24"+
    "\7\0\1\24\1\204\20\24\11\0\15\24\1\122\2\0"+
    "\2\24\1\0\4\24\1\205\2\24\7\0\7\24\1\206"+
    "\4\24\1\207\5\24\11\0\15\24\1\122\2\0\2\24"+
    "\1\0\6\24\1\210\7\0\14\24\1\211\5\24\11\0"+
    "\15\24\1\122\2\0\2\24\1\0\7\24\7\0\1\212"+
    "\21\24\11\0\15\24\1\122\2\0\2\24\1\0\4\24"+
    "\1\213\2\24\7\0\22\24\11\0\15\24\1\122\2\0"+
    "\2\24\1\0\7\24\7\0\15\24\1\214\4\24\11\0"+
    "\15\24\1\122\2\0\2\24\1\0\7\24\7\0\2\24"+
    "\1\215\17\24\11\0\15\24\1\122\2\0\2\24\1\0"+
    "\4\24\1\216\1\24\1\217\7\0\22\24\11\0\15\24"+
    "\1\122\2\0\2\24\1\0\4\24\1\220\2\24\7\0"+
    "\22\24\22\0\1\221\72\0\1\222\103\0\2\100\2\0"+
    "\1\100\2\0\1\100\1\0\1\100\7\0\3\100\64\0"+
    "\1\103\57\0\2\105\2\0\1\105\2\0\1\105\1\0"+
    "\1\105\7\0\3\105\27\0\34\111\2\0\36\111\35\0"+
    "\1\114\37\0\1\116\1\24\13\116\3\0\1\116\1\24"+
    "\1\0\2\24\1\116\4\24\7\0\22\24\11\0\1\116"+
    "\1\115\13\116\3\0\1\116\1\115\1\0\2\115\1\116"+
    "\4\115\7\0\22\115\11\0\1\223\1\115\13\116\3\0"+
    "\1\223\1\115\1\0\2\115\1\223\4\115\7\0\22\115"+
    "\11\0\1\223\1\24\4\116\2\224\5\116\3\0\1\223"+
    "\1\24\1\0\2\24\1\223\4\24\7\0\22\24\11\0"+
    "\1\172\5\0\2\173\10\0\1\172\4\0\1\172\2\0"+
    "\2\225\42\0\1\134\1\135\1\136\1\0\1\226\1\227"+
    "\1\0\1\230\1\231\1\230\1\231\2\226\1\232\2\0"+
    "\1\134\1\135\1\0\2\135\1\134\4\135\7\0\22\135"+
    "\15\0\1\233\67\0\1\130\10\0\1\234\6\0\1\130"+
    "\4\0\1\130\2\0\2\225\1\121\41\0\1\235\17\0"+
    "\1\235\4\0\1\235\46\0\1\172\5\0\2\173\10\0"+
    "\1\172\4\0\1\172\46\0\1\134\1\236\13\134\3\0"+
    "\1\134\1\236\1\0\2\236\1\134\4\236\7\0\22\236"+
    "\11\0\15\135\3\0\2\135\1\0\7\135\7\0\22\135"+
    "\11\0\1\136\1\135\13\136\3\0\1\136\1\135\1\0"+
    "\2\135\1\136\4\135\7\0\22\135\11\0\1\141\1\237"+
    "\13\141\3\0\1\141\1\237\1\0\2\237\1\141\4\237"+
    "\7\0\22\237\11\0\15\142\1\240\2\0\2\142\1\0"+
    "\7\142\7\0\22\142\11\0\1\143\1\142\13\143\3\0"+
    "\1\143\1\142\1\0\2\142\1\143\4\142\7\0\22\142"+
    "\11\0\1\143\1\142\2\143\1\147\10\143\1\240\2\0"+
    "\1\143\1\142\1\0\2\142\1\143\4\142\7\0\22\142"+
    "\15\0\1\241\10\0\1\240\73\0\1\240\56\0\1\143"+
    "\1\142\13\143\1\240\2\0\1\143\1\142\1\0\2\142"+
    "\1\143\4\142\7\0\22\142\15\0\1\146\106\0\1\242"+
    "\73\0\1\242\2\151\2\0\1\151\2\0\1\151\1\0"+
    "\1\151\7\0\3\151\30\0\1\153\17\0\1\153\2\0"+
    "\3\153\1\0\3\153\10\0\1\153\10\0\2\153\50\0"+
    "\1\243\62\0\1\244\4\0\1\244\46\0\1\153\17\0"+
    "\1\153\2\0\3\153\1\0\3\153\10\0\1\153\5\0"+
    "\1\245\2\0\2\153\50\0\1\246\73\0\1\247\42\0"+
    "\15\24\1\122\2\0\2\24\1\0\7\24\7\0\10\24"+
    "\1\250\11\24\11\0\15\24\1\122\2\0\2\24\1\0"+
    "\7\24\7\0\14\24\1\251\5\24\11\0\15\24\1\122"+
    "\2\0\2\24\1\0\7\24\7\0\13\24\1\252\6\24"+
    "\11\0\15\24\1\122\2\0\2\24\1\0\7\24\7\0"+
    "\4\24\1\253\15\24\11\0\1\172\17\0\1\172\4\0"+
    "\1\172\2\0\2\225\42\0\1\172\17\0\1\172\4\0"+
    "\1\172\100\0\1\254\41\0\15\24\1\122\2\0\1\24"+
    "\1\204\1\0\7\24\7\0\22\24\11\0\15\24\1\122"+
    "\2\0\2\24\1\0\7\24\7\0\2\24\1\255\17\24"+
    "\11\0\15\24\1\122\2\0\2\24\1\0\7\24\7\0"+
    "\7\24\1\256\12\24\11\0\15\24\1\122\2\0\2\24"+
    "\1\0\7\24\7\0\14\24\1\257\5\24\11\0\15\24"+
    "\1\122\2\0\2\24\1\0\7\24\7\0\1\260\21\24"+
    "\11\0\15\24\1\122\2\0\2\24\1\0\7\24\7\0"+
    "\12\24\1\261\7\24\11\0\15\24\1\122\2\0\2\24"+
    "\1\0\7\24\7\0\2\24\1\262\17\24\11\0\15\24"+
    "\1\122\2\0\2\24\1\0\7\24\7\0\4\24\1\263"+
    "\15\24\11\0\15\24\1\122\2\0\2\24\1\0\4\24"+
    "\1\264\2\24\7\0\22\24\11\0\15\24\1\122\2\0"+
    "\2\24\1\0\7\24\7\0\2\24\1\265\17\24\11\0"+
    "\15\24\1\122\2\0\2\24\1\0\7\24\7\0\1\24"+
    "\1\266\20\24\11\0\15\24\1\122\2\0\2\24\1\0"+
    "\7\24\7\0\20\24\1\267\1\24\11\0\15\24\1\122"+
    "\2\0\2\24\1\0\7\24\7\0\15\24\1\270\4\24"+
    "\11\0\15\24\1\122\2\0\2\24\1\0\7\24\7\0"+
    "\2\24\1\271\17\24\11\0\15\24\1\122\2\0\2\24"+
    "\1\0\6\24\1\272\7\0\11\24\1\273\10\24\11\0"+
    "\15\24\1\122\2\0\2\24\1\0\7\24\7\0\1\274"+
    "\6\24\1\275\12\24\11\0\15\24\1\122\2\0\2\24"+
    "\1\0\7\24\7\0\12\24\1\276\7\24\11\0\15\24"+
    "\1\122\2\0\2\24\1\0\7\24\7\0\1\277\21\24"+
    "\11\0\15\24\1\122\2\0\1\24\1\300\1\0\7\24"+
    "\7\0\22\24\11\0\1\223\1\115\4\116\2\117\5\116"+
    "\3\0\1\223\1\115\1\0\2\115\1\223\4\115\7\0"+
    "\22\115\11\0\1\301\5\0\2\302\10\0\1\301\4\0"+
    "\1\301\46\0\1\136\1\135\2\136\1\231\10\136\3\0"+
    "\1\136\1\135\1\0\2\135\1\136\4\135\7\0\22\135"+
    "\15\0\1\303\73\0\1\230\67\0\1\301\17\0\1\301"+
    "\4\0\1\301\46\0\1\235\17\0\1\235\4\0\1\235"+
    "\2\0\2\225\1\121\41\0\1\134\1\135\13\134\3\0"+
    "\1\134\1\135\1\0\2\135\1\134\4\135\7\0\22\135"+
    "\11\0\1\141\1\142\13\141\3\0\1\141\1\142\1\0"+
    "\2\142\1\141\4\142\7\0\22\142\15\0\1\146\10\0"+
    "\1\240\123\0\1\304\76\0\1\305\67\0\1\306\76\0"+
    "\1\307\24\0\15\24\1\122\2\0\2\24\1\0\7\24"+
    "\7\0\11\24\1\272\10\24\11\0\15\24\1\122\2\0"+
    "\2\24\1\0\7\24\7\0\12\24\1\310\7\24\11\0"+
    "\15\24\1\122\2\0\2\24\1\0\6\24\1\311\7\0"+
    "\22\24\11\0\15\24\1\122\2\0\2\24\1\0\7\24"+
    "\7\0\12\24\1\312\7\24\11\0\15\24\1\122\2\0"+
    "\2\24\1\0\6\24\1\313\7\0\22\24\11\0\15\24"+
    "\1\122\2\0\2\24\1\0\7\24\7\0\1\314\21\24"+
    "\11\0\15\24\1\122\2\0\2\24\1\0\4\24\1\315"+
    "\2\24\7\0\22\24\11\0\15\24\1\122\2\0\2\24"+
    "\1\0\6\24\1\316\7\0\22\24\11\0\15\24\1\122"+
    "\2\0\2\24\1\0\6\24\1\204\7\0\22\24\11\0"+
    "\15\24\1\122\2\0\2\24\1\0\7\24\7\0\4\24"+
    "\1\317\15\24\11\0\15\24\1\122\2\0\2\24\1\0"+
    "\7\24\7\0\4\24\1\320\15\24\11\0\15\24\1\122"+
    "\2\0\2\24\1\0\7\24\7\0\11\24\1\321\10\24"+
    "\11\0\15\24\1\122\2\0\2\24\1\0\4\24\1\322"+
    "\2\24\7\0\22\24\11\0\15\24\1\122\2\0\2\24"+
    "\1\0\6\24\1\323\7\0\22\24\11\0\15\24\1\122"+
    "\2\0\2\24\1\0\7\24\7\0\13\24\1\324\6\24"+
    "\11\0\15\24\1\122\2\0\2\24\1\0\7\24\7\0"+
    "\2\24\1\204\17\24\11\0\15\24\1\122\2\0\2\24"+
    "\1\0\7\24\7\0\7\24\1\263\12\24\11\0\15\24"+
    "\1\122\2\0\2\24\1\0\7\24\7\0\11\24\1\325"+
    "\10\24\11\0\15\24\1\122\2\0\2\24\1\0\6\24"+
    "\1\326\7\0\22\24\11\0\15\24\1\122\2\0\1\24"+
    "\1\327\1\0\7\24\7\0\22\24\11\0\15\24\1\122"+
    "\2\0\2\24\1\0\7\24\7\0\15\24\1\330\4\24"+
    "\11\0\15\24\1\122\2\0\2\24\1\0\7\24\7\0"+
    "\11\24\1\331\10\24\11\0\1\301\5\0\2\234\10\0"+
    "\1\301\4\0\1\301\107\0\1\332\40\0\1\333\126\0"+
    "\1\334\32\0\15\24\1\122\2\0\2\24\1\0\7\24"+
    "\7\0\5\24\1\204\14\24\11\0\15\24\1\122\2\0"+
    "\2\24\1\0\7\24\7\0\11\24\1\54\10\24\11\0"+
    "\15\24\1\122\2\0\2\24\1\0\7\24\7\0\1\335"+
    "\21\24\11\0\15\24\1\122\2\0\2\24\1\0\7\24"+
    "\7\0\12\24\1\336\7\24\11\0\15\24\1\122\2\0"+
    "\2\24\1\0\7\24\7\0\7\24\1\337\12\24\11\0"+
    "\15\24\1\122\2\0\1\24\1\340\1\0\7\24\7\0"+
    "\22\24\11\0\15\24\1\122\2\0\2\24\1\0\7\24"+
    "\7\0\4\24\1\341\15\24\11\0\15\24\1\122\2\0"+
    "\2\24\1\0\7\24\7\0\1\342\21\24\11\0\15\24"+
    "\1\122\2\0\2\24\1\0\7\24\7\0\2\24\1\343"+
    "\17\24\11\0\15\24\1\122\2\0\2\24\1\0\7\24"+
    "\7\0\11\24\1\344\10\24\11\0\15\24\1\122\2\0"+
    "\1\24\1\345\1\0\7\24\7\0\22\24\11\0\15\24"+
    "\1\122\2\0\2\24\1\0\7\24\7\0\7\24\1\346"+
    "\12\24\11\0\15\24\1\122\2\0\2\24\1\0\7\24"+
    "\7\0\7\24\1\204\12\24\11\0\15\24\1\122\2\0"+
    "\2\24\1\0\7\24\7\0\4\24\1\347\15\24\11\0"+
    "\15\24\1\122\2\0\2\24\1\0\7\24\7\0\14\24"+
    "\1\350\5\24\11\0\15\24\1\122\2\0\2\24\1\0"+
    "\7\24\7\0\14\24\1\351\5\24\11\0\15\24\1\122"+
    "\2\0\2\24\1\0\4\24\1\352\2\24\7\0\22\24"+
    "\57\0\1\353\25\0\15\24\1\122\2\0\2\24\1\0"+
    "\7\24\7\0\11\24\1\354\10\24\11\0\15\24\1\122"+
    "\2\0\2\24\1\0\7\24\7\0\1\204\21\24\11\0"+
    "\15\24\1\122\2\0\2\24\1\0\7\24\7\0\11\24"+
    "\1\355\10\24\11\0\15\24\1\122\2\0\2\24\1\0"+
    "\4\24\1\356\2\24\7\0\22\24\11\0\15\24\1\122"+
    "\2\0\2\24\1\0\6\24\1\357\7\0\22\24\11\0"+
    "\15\24\1\122\2\0\2\24\1\0\7\24\7\0\2\24"+
    "\1\360\17\24\11\0\15\24\1\122\2\0\2\24\1\0"+
    "\7\24\7\0\16\24\1\361\3\24\11\0\15\24\1\122"+
    "\2\0\2\24\1\0\6\24\1\362\7\0\22\24\11\0"+
    "\15\24\1\122\2\0\2\24\1\0\7\24\7\0\4\24"+
    "\1\204\15\24\11\0\15\24\1\122\2\0\2\24\1\0"+
    "\7\24\7\0\13\24\1\341\6\24\11\0\15\24\1\122"+
    "\2\0\2\24\1\0\1\24\1\363\5\24\7\0\22\24"+
    "\42\0\1\364\42\0\15\24\1\122\2\0\2\24\1\0"+
    "\7\24\7\0\14\24\1\365\5\24\11\0\15\24\1\122"+
    "\2\0\2\24\1\0\7\24\7\0\12\24\1\360\7\24"+
    "\11\0\15\24\1\122\2\0\2\24\1\0\7\24\7\0"+
    "\2\24\1\366\17\24\11\0\15\24\1\122\2\0\2\24"+
    "\1\0\7\24\7\0\11\24\1\367\10\24\11\0\15\24"+
    "\1\122\2\0\1\24\1\370\1\0\7\24\7\0\22\24"+
    "\11\0\15\24\1\122\2\0\2\24\1\0\7\24\7\0"+
    "\7\24\1\371\12\24\60\0\1\372\24\0\15\24\1\122"+
    "\2\0\2\24\1\0\7\24\7\0\2\24\1\341\17\24"+
    "\11\0\15\24\1\122\2\0\2\24\1\0\7\24\7\0"+
    "\1\360\21\24\11\0\15\24\1\122\2\0\2\24\1\0"+
    "\7\24\7\0\4\24\1\373\15\24\11\0\15\24\1\122"+
    "\2\0\2\24\1\0\6\24\1\360\7\0\22\24\56\0"+
    "\1\374\26\0\15\24\1\122\2\0\2\24\1\0\6\24"+
    "\1\375\7\0\22\24\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11460];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\2\1\1\11\5\1\1\11\25\1\2\11"+
    "\15\1\11\11\2\1\1\11\2\1\3\11\2\1\1\11"+
    "\3\1\1\11\4\0\2\1\1\0\1\11\4\1\2\0"+
    "\1\11\1\0\1\1\1\0\1\1\1\11\1\0\1\1"+
    "\1\0\4\1\3\0\1\1\1\0\1\11\1\0\1\1"+
    "\2\11\2\0\2\11\5\1\2\0\24\1\2\11\1\1"+
    "\2\0\1\1\1\0\1\11\1\1\1\0\1\11\5\0"+
    "\1\1\1\11\1\0\1\1\3\0\4\1\1\11\25\1"+
    "\1\0\1\1\3\0\1\11\22\1\1\11\1\0\1\11"+
    "\16\1\1\0\10\1\1\0\5\1\1\0\1\1\1\11"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    int commentLevel = 0;


  DylanLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  DylanLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 154) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 50: 
          { return DylanTypes.CHARACTER_LITERAL;
          }
        case 66: break;
        case 57: 
          { return DylanTypes.HASH_NEXT;
          }
        case 67: break;
        case 45: 
          { return DylanTypes.HASH_PAREN;
          }
        case 68: break;
        case 49: 
          { commentLevel++; yybegin(COMMENT_BLOCK); return DylanTypes.COMMENT;
          }
        case 69: break;
        case 37: 
          { yybegin(COMMENT_BLOCK); commentLevel++; return DylanTypes.COMMENT;
          }
        case 70: break;
        case 27: 
          { return DylanTypes.COMMENT;
          }
        case 71: break;
        case 51: 
          { return DylanTypes.END;
          }
        case 72: break;
        case 25: 
          { return DylanTypes.COMMA;
          }
        case 73: break;
        case 36: 
          { return DylanTypes.EQUAL_ARROW;
          }
        case 74: break;
        case 33: 
          { yybegin(DYLAN_CODE); return  DylanTypes.CRLF;
          }
        case 75: break;
        case 21: 
          { return DylanTypes.LBRACKET;
          }
        case 76: break;
        case 8: 
          { return TokenType.WHITE_SPACE;
          }
        case 77: break;
        case 7: 
          { yybegin(YYINITIAL); return DylanTypes.CRLF;
          }
        case 78: break;
        case 28: 
          { return DylanTypes.STRING;
          }
        case 79: break;
        case 10: 
          { return DylanTypes.NONDEFINING_NONEXPRESSION_WORD;
          }
        case 80: break;
        case 19: 
          { return DylanTypes.LPAREN;
          }
        case 81: break;
        case 40: 
          { return DylanTypes.ESCAPED_WORD;
          }
        case 82: break;
        case 30: 
          { yybegin(DYLAN_CODE); return DylanTypes.STRING;
          }
        case 83: break;
        case 14: 
          { return DylanTypes.UNARY_AND_BINARY_OPERATOR;
          }
        case 84: break;
        case 20: 
          { return DylanTypes.RPAREN;
          }
        case 85: break;
        case 4: 
          { return DylanTypes.CRLF;
          }
        case 86: break;
        case 16: 
          { return DylanTypes.DOT;
          }
        case 87: break;
        case 34: 
          { return DylanTypes.QUERY_QUERY;
          }
        case 88: break;
        case 18: 
          { yybegin(STRING); return DylanTypes.STRING;
          }
        case 89: break;
        case 61: 
          { return DylanTypes.DEFINE;
          }
        case 90: break;
        case 60: 
          { return DylanTypes.MACRO_T;
          }
        case 91: break;
        case 59: 
          { return DylanTypes.DEFINE_BODY_BEGIN_WORD;
          }
        case 92: break;
        case 64: 
          { return DylanTypes.HASH_ALL_KEYS;
          }
        case 93: break;
        case 58: 
          { return DylanTypes.LOCAL;
          }
        case 94: break;
        case 41: 
          { return DylanTypes.OPERATOR_NAME;
          }
        case 95: break;
        case 56: 
          { return DylanTypes.HASH_REST;
          }
        case 96: break;
        case 44: 
          { return DylanTypes.HASH_T;
          }
        case 97: break;
        case 42: 
          { return DylanTypes.HASH_HASH;
          }
        case 98: break;
        case 47: 
          { return DylanTypes.NONDEFINING_BEGIN_WORD;
          }
        case 99: break;
        case 5: 
          { yybegin(WAITING_VALUE); return TokenType.WHITE_SPACE;
          }
        case 100: break;
        case 55: 
          { return DylanTypes.SLOT;
          }
        case 101: break;
        case 29: 
          { yybegin(DYLAN_CODE); return DylanTypes.CRLF;
          }
        case 102: break;
        case 31: 
          { return DylanTypes.SYMBOL;
          }
        case 103: break;
        case 24: 
          { return DylanTypes.RBRACE;
          }
        case 104: break;
        case 23: 
          { return DylanTypes.LBRACE;
          }
        case 105: break;
        case 32: 
          { yybegin(DYLAN_CODE); return DylanTypes.SYMBOL;
          }
        case 106: break;
        case 65: 
          { return DylanTypes.OTHERWISE;
          }
        case 107: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 108: break;
        case 12: 
          { return DylanTypes.EQUAL;
          }
        case 109: break;
        case 13: 
          { return DylanTypes.UNARY_OPERATOR_ONLY;
          }
        case 110: break;
        case 15: 
          { return DylanTypes.BINARY_OPERATOR_ONLY;
          }
        case 111: break;
        case 38: 
          { return DylanTypes.CONSTRAINED_NAME;
          }
        case 112: break;
        case 26: 
          { return DylanTypes.SEMICOLON;
          }
        case 113: break;
        case 9: 
          { return DylanTypes.NUMBER;
          }
        case 114: break;
        case 52: 
          { return DylanTypes.ELLIPSIS;
          }
        case 115: break;
        case 39: 
          { return DylanTypes.COLON_COLON;
          }
        case 116: break;
        case 2: 
          { return DylanTypes.KEY;
          }
        case 117: break;
        case 22: 
          { return DylanTypes.RBRACKET;
          }
        case 118: break;
        case 54: 
          { return DylanTypes.HASH_KEY;
          }
        case 119: break;
        case 53: 
          { return DylanTypes.LET;
          }
        case 120: break;
        case 63: 
          { return DylanTypes.HANDLER_T;
          }
        case 121: break;
        case 62: 
          { return DylanTypes.DEFINE_LIST_BEGIN_WORD;
          }
        case 122: break;
        case 17: 
          { /* return DylanTypes.CRLF; */
          }
        case 123: break;
        case 6: 
          { yybegin(YYINITIAL); return DylanTypes.HEADER_VALUE;
          }
        case 124: break;
        case 35: 
          { return DylanTypes.EQUAL_EQUAL;
          }
        case 125: break;
        case 43: 
          { yybegin(SYMBOL); return DylanTypes.SYMBOL;
          }
        case 126: break;
        case 3: 
          { yybegin(WAITING_VALUE); return DylanTypes.HEADER_SEPARATOR;
          }
        case 127: break;
        case 48: 
          { commentLevel--; if (commentLevel == 0) { yybegin(DYLAN_CODE);} return DylanTypes.COMMENT;
          }
        case 128: break;
        case 46: 
          { return DylanTypes.HASH_BRACKET;
          }
        case 129: break;
        case 11: 
          { return DylanTypes.QUERY;
          }
        case 130: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
